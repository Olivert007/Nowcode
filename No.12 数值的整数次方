//给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。
#include <iostream> 
#include <vector> 
#include <string>
#include <queue>
#include <stack>
#include <cmath>
using namespace std;


struct ListNode {
	int val;
	struct ListNode *next;
	ListNode(int x) :
		val(x), next(NULL) {
	}
};

//Definition for binary tree
struct TreeNode {
	int val;
	TreeNode *left;
	TreeNode *right;
	TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {
public:
	bool g_InvalidInput = false;
	double Power(double base, int exponent) {
		g_InvalidInput = false;
		double base_begin=base;
		if (base == 0.0 && exponent <= 0) {
			g_InvalidInput = true;
			return 0;
		}
		if (base == 0 && exponent == 0) {
			g_InvalidInput = true;
			return 0;
		}
		if (exponent > 0) {
			while (exponent-- > 1)
				base *= base_begin;
			return base;
		}
		else if (exponent < 1) {
			while (exponent++ < -1)
				base *= base_begin;
			return 1 / base;
		}
		else
			return 1;
	}
};

int  main()
{
	Solution sol;
	cout << sol.Power(0, 0) << endl;
	cout << sol.Power(0, -1) << endl;
	cout << sol.Power(0, 1) << endl;
	cout << sol.Power(2, 3) << endl;
	cout << sol.Power(2, -3) << endl;
	cout << sol.Power(2, 0) << endl;

	getchar();
	getchar();
	return 0;
}
